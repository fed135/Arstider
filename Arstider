#!/bin/bash

###-------------------------------------// Variables

DESTINATION=""

CURRENT_DIR="$PWD"

LIBNAME="Arstider"
LIBPATH="$( cd "$( dirname "$0" )" && pwd )"
LIBVERSION=""

PROJECT="-"
META="."$LIBNAME"Project"

TEMPLATE_URL="https://github.com/fed135/Arstider_template/archive/master.zip"
TEMPLATE_FOLDER="Arstider_template-master"

DEPENDENCIES=('http://requirejs.org/docs/release/2.1.14/minified/require.js' 'https://raw.githubusercontent.com/goldfire/howler.js/master/howler.min.js')
LIBRARIES=('require.js' 'howler.min.js')

ALL_ARGUMENTS=( $@ )
MAIN_COMMAND=""
MAIN_ARGUMENTS=()

declare -A commands
declare -A filters

###-------------------------------------// Colors

BLUE_COLOR="\033[0;34m"     #Reserved names/methods
GREEN_COLOR="\033[0;32m"    #Key words/variables
YELLOW_COLOR="\033[0;33m"   #Paths
RED_COLOR="\033[0;31m"      #Errors
PURPLE_COLOR="\033[0;35m"   #Warnings
CYAN_COLOR="\033[0;36m"     #External Program output
GRAY_COLOR="\033[0;37m"     #Comments/Labels
RESET="\e[0m"

###-------------------------------------// Functions

#Looks a project metadata file in the current directory
check_if_in_project () {
  local raw

  upsearch () {
    if [ -f $1 ] ; then
      mapfile < $1
      raw="${MAPFILE[@]}"
      PROJECT=${raw:5}
      PROJECT=$(echo $PROJECT|tr -d '\n')
      #echo -e $GREEN_COLOR" in Project $PROJECT!"
      return 1
    fi

    if [ "$PWD" != "/" ] ; then
      cd ".."
      upsearch $1
    fi
  }

  upsearch $META
}

#Change build path
change_dest () {
  DESTINATION=$1
  #echo -e "Changing working directory to "$YELLOW_COLOR$DESTINATION$RESET
  mkdir -p $1
}

#Set working directory and navigate to library
welcome () {
  check_if_in_project
  change_dest "$CURRENT_DIR"
}

#Compile function
compile () {
  local temp=""
  local alt=1
  local unminified=""
  local minified=""

  if [ ${#MAIN_ARGUMENTS[@]} -eq 1 ] ; then
    change_dest ${MAIN_ARGUMENTS[0]}
  fi

  version

  echo -e $CYAN_COLOR"Gathering classes..."

  for f in $(find "src/sdk" -name "*.js") ; do
    if [ $alt -eq 0 ] ; then
      echo -e $CYAN_COLOR"  adding "$f$RESET
      alt=1
    else
      echo -e $BLUE_COLOR"  adding "$f$RESET
      alt=0
    fi

    mapfile < $f
    temp+="${MAPFILE[@]}"
  done

  echo -e $CYAN_COLOR"Parsing..."
  unminified=${temp//@version@/$LIBVERSION}
  unminified=${unminified//@debug@/true}
  unminified=${unminified//@target@/dev}
  
  minified=${temp//@version@/$LIBVERSION}
  minified=${minified//@debug@/false}
  minified=${minified//@target@/turbo}

  echo "Saving to "$DESTINATION/$LIBNAME".js..."
  echo "$unminified" > $DESTINATION/$LIBNAME".js"

  echo "Compiling "$LIBNAME".min.js..."
  echo "$minified" > $DESTINATION/"_temp.js"
  java -jar ./tools/compiler.jar --js $DESTINATION/"_temp.js" --js_output_file $DESTINATION/$LIBNAME".min.js" --compilation_level ADVANCED_OPTIMIZATIONS
  rm -rf $DESTINATION/"_temp.js"

  echo -e $GREEN_COLOR"Build completed successfully!"$RESET
}

#Compiles the documentation at the specified location
documentation () {
  if [ ${#MAIN_ARGUMENTS[@]} -eq 1 ] ; then
    change_dest ${MAIN_ARGUMENTS[0]}
  fi

  echo -e $CYAN_COLOR
  tools/jsdoc/jsdoc --destination $DESTINATION/$LIBNAME-Documentation --recurse --verbose src/sdk
  echo -e $GREEN_COLOR"Documentation successfully built!"$RESET
}

#Create a new project
create_project () {
  #resolve project directory path
  if [ ${#MAIN_ARGUMENTS[@]} -eq 2 ] ; then
    change_dest "${MAIN_ARGUMENTS[1]}/${MAIN_ARGUMENTS[0]}"
  else
    change_dest "$CURRENT_DIR/${MAIN_ARGUMENTS[0]}"
  fi

  #create folder
  if [ -d "$DESTINATION" ] ; then
    show_confirm "Create new project at $DESTINATION? (Y/n)"
    echo $BR
    if [ $result -eq 1 ] ; then
      rm -rf "$DESTINATION"
      if [ -d "$DESTINATION" ] ; then
        #Cancelled deletion, exit
        exit 0
      fi
    else
      exit 0
    fi
  else
    mkdir -p $DESTINATION
  fi

  #get template zip
  echo -e $GREEN_COLOR"Getting lastest project template..."$RESET
  wget $TEMPLATE_URL
  echo -e $GREEN_COLOR"Unzipping..."$RESET
  unzip master.zip
  echo -e $GREEN_COLOR"Copying files..."$RESET
  cp -R "$PWD/$TEMPLATE_FOLDER/" $DESTINATION

  #cleanup
  echo -e $GREEN_COLOR"Cleaning up..."$RESET
  rm master.zip
  rm -rf $TEMPLATE_FOLDER

  #project meta
  echo -e $GREEN_COLOR"Creating metadata file..."$RESET
  touch "$DESTINATION/$META"
  echo "name=${MAIN_ARGUMENTS[0]}" > "$DESTINATION/$META"
  chmod 770 $DESTINATION

  #get libraries
  mkdir "$DESTINATION/src/js/libs"
  for (( i=0 ; i < ${#DEPENDENCIES[@]} ; i++ )) do
    echo -e $GREEN_COLOR"Getting library "${LIBRARIES[$i]}"..."$RESET
    wget "${DEPENDENCIES[$i]}"
    cp "${LIBRARIES[$i]}" "$DESTINATION/src/js/libs/${LIBRARIES[$i]}"
    rm "${LIBRARIES[$i]}"
  done

  #for proper js libs path
  MAIN_ARGUMENTS=("$DESTINATION/src/js/libs/")
  compile "$DESTINATION/src/js/libs"

  #Done
  echo -e $GREEN_COLOR"Finished!"$RESET
}

create_screen () {
  local temp
  local pathname
  local name
  local dir

  if [[ "$PROJECT" != "-" ]] ; then

    mapfile < "$LIBPATH/Templates/Screen.js"
    temp=${MAPFILE[@]}

    pathname=${MAIN_ARGUMENTS[0]}
    IFS='/' read -a dir <<< "${pathname}"
    name=${dir[(( ${#dir[@]} - 1 ))]}

    temp=${temp//@name@/$name}
    temp=${temp//@pathname@/$pathname}

    if [ ${#MAIN_ARGUMENTS[@]} -eq 2 ] ; then
      change_dest ${MAIN_ARGUMENTS[1]}
    fi

    echo "Creating screen $DESTINATION/$name.js"
    echo "$temp" > "$DESTINATION/$name.js"
  else
    err_msg "Not currently in a project!"
  fi
}

#Show version number function
version () {
  mapfile < version.properties
  LIBVERSION=${MAPFILE[@]}
  LIBVERSION=${LIBVERSION:8}
  echo -e $BLUE_COLOR$LIBNAME" v"$LIBVERSION$RESET
}

#Show manual function
manual () {
  local tab="\t"
  local ret="|*"
  local IFS=','
  local keys
  local arguments
  local cm
  local isopt
  local words
  local line
  local maxlinesize=60
  local separator=$ret

  for (( i=0 ; i < $maxlinesize ; i++ )) do
    separator+="*"
  done

  for (( i=0 ; i < ${#command_list[@]} ; i++ )) do
    cm=${command_list[$i]}
    #Separator
    echo $separator

    #Title
    echo -e "$ret $BLUE_COLOR$cm$RESET"

    echo "$ret - - - - - - - - - - - - - - - - - - - - -"

    #Keys
    echo -e "$ret "$GRAY_COLOR"Keyword(s):"$RESET
    IFS=',' read -a keys <<< "${commands[$cm,key]}"
    for (( u=0 ; u < ${#keys[@]} ; u++ )) do
      echo -e $ret$tab$tab"${keys[$u]}"
    done
    echo $ret

    #Arguments
    echo -e "$ret "$GRAY_COLOR"Argument(s):"$RESET
    IFS=',' read -a arguments <<< "${commands[$cm,arguments]}"
    for (( u=0 ; u < ${#arguments[@]} ; u++ )) do
      isopt="${arguments[$u]:0:1}"
      if [ $isopt == "?" ] ; then
        echo -e $ret$tab$tab"${arguments[$u]:1} "$GREEN_COLOR"[optional]"$RESET
      else
        echo -e $ret$tab$tab"${arguments[$u]}"
      fi
    done
    echo $ret

    #description
    echo -e "$ret "$GRAY_COLOR"Description:"$RESET
    IFS=' ' read -a words <<< "${commands[$cm,description]}"
    while [[ ${#words[@]} -gt 0 ]] ; do
      line=""
      while [[ $((${#line}+${#words[0]})) -lt $maxlinesize ]]; do
        line+="${words[0]} "
        words=("${words[@]:1}")
      done
      echo -e "$ret "$tab$line
    done
    echo $ret

    #target
    echo -e "$ret "$GRAY_COLOR"Target (global/varies/project):"$RESET
    echo -e "$ret "$tab${commands[$cm,target]}
    echo $ret

    #output
    echo -e "$ret "$GRAY_COLOR"Output:"$RESET
    echo -e "$ret "$tab${commands[$cm,output]}
    echo $ret
  done
  echo $separator
}

#Error message
err_msg () {
  local pre="Error:"

  if [ $# -eq 0 ] ; then
    echo -e $RED_COLOR$pre$RESET
  elif [ $# -eq 1 ] ; then
    echo -e $RED_COLOR$pre$1$RESET
  elif [ $# -eq 2 ] ; then
    echo -e $RED_COLOR$pre$1$RESET$2
  fi

  #show manual
  manual
}

#Confirmation message
show_confirm () {
  read -p "$1 " -n 1 -r
  echo " "
  if [[ $REPLY =~ ^[Yy]$ ]] ; then
    # do dangerous stuff
    return 1
  else
    exit 0
  fi
}

#Goodbye message, returns to initial directory
goodbye () {
  echo -e $RESET
  cd $CURRENT_DIR
}

#Run command
run_command () {
  local command_found=0
  local IFS
  local keys
  local cm
  local filter

  for (( i=0 ; i < ${#command_list[@]} ; i++ )) do
    cm=${command_list[$i]}
    IFS="," read -ra keys <<< "${commands[$cm,key]}"
    for u in "${keys[@]}" ; do
      if [[ "$MAIN_COMMAND" == "$u" ]] ; then
        command_found=1
        filter="${commands[$cm,target]}"
        ${filters[$filter]}
        ${commands[$cm,method]}
        return 1
      fi
    done
  done

  if [ $command_found == 0 ] ; then
    #No command
    err_msg "Command not found!"
    exit 0
  fi
}

###-------------------------------------// Commands

init_commands () {
  command_list=()

  local ref=""

  local key="key"
  local target="target"
  local method="method"
  local arguments="arguments"
  local output="output"
  local description="description"

  #Compile command
  ref="compile"
  command_list+=("$ref")
  commands[$ref,$key]="-c,--compile"
  commands[$ref,$target]="global"
  commands[$ref,$method]=compile
  commands[$ref,$arguments]="?Destination"
  commands[$ref,$output]="program"
  commands[$ref,$description]="Compiles the $LIBNAME classes into $LIBNAME.js (unminified) and $LIBNAME.min.js (Google Closure turbo compression) at location"

  #Build documentation command
  ref="documentation"
  command_list+=("$ref")
  commands[$ref,$key]="-d,--documentation"
  commands[$ref,$target]="global"
  commands[$ref,$method]=documentation
  commands[$ref,$arguments]="?Destination"
  commands[$ref,$output]="program"
  commands[$ref,$description]="Compiles the project's technical documentation (JSDoc) at the specified location"

  #Show manual command
  ref="manual"
  command_list+=("$ref")
  commands[$ref,$key]="-m,--manual"
  commands[$ref,$target]="varies"
  commands[$ref,$method]=manual
  commands[$ref,$arguments]=""
  commands[$ref,$output]="$LIBNAME user manual"
  commands[$ref,$description]="Shows the available commands for this program"

  #New project
  ref="new project"
  command_list+=("$ref")
  commands[$ref,$key]="-p,--newproject"
  commands[$ref,$target]="varies"
  commands[$ref,$method]=create_project
  commands[$ref,$arguments]="Project name,?Destination"
  commands[$ref,$output]="program"
  commands[$ref,$description]="Fetches the latest template project from internet and creates a new project at the specified location"

  #New screen
  ref="new screen"
  command_list+=("$ref")
  commands[$ref,$key]="-s,--newscreen"
  commands[$ref,$target]="project"
  commands[$ref,$method]=create_screen
  commands[$ref,$arguments]="Screen name,?Destination"
  commands[$ref,$output]="program"
  commands[$ref,$description]="Fetches the latest screen template (recommended syntax) from internet and creates a new screen at the specified location"

  #Version
  ref="version"
  command_list+=("$ref")
  commands[$ref,$key]="-v,--version"
  commands[$ref,$target]="varies"
  commands[$ref,$method]=version
  commands[$ref,$arguments]=""
  commands[$ref,$output]="$LIBNAME version number"
  commands[$ref,$description]="Displays the currently installed $LIBNAME version"
}

###-------------------------------------// Filters

init_filters () {
  #Temp
  base_filter () {
    cd $LIBPATH
    return 1
  }

  #Temp
  varies_filter () {
    base_filter
    return 1
  }

  project_filter () {
    base_filter
    cd $CURRENT_DIR
    if [[ "$PROJECT" == "-" ]] ; then
      err_msg "Not currently in a project!"
      exit 0
    fi
  }

  filters["global"]=base_filter
  filters["varies"]=varies_filter
  filters["project"]=project_filter
}

###-------------------------------------// Program

main () {
  welcome
  init_commands
  init_filters
  if [ ${#ALL_ARGUMENTS} -eq 0 ] ; then
    #No command
    err_msg "No command specified"
    exit 0
  else
    MAIN_COMMAND=${ALL_ARGUMENTS[0]}
    MAIN_ARGUMENTS=("${ALL_ARGUMENTS[@]:1}")
  fi
  run_command
  goodbye
}

#Entry point
main