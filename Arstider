#!/bin/bash

###-------------------------------------// Variables

DESTINATION=""

CURRENT_DIR="$PWD"

LIBNAME="Arstider"
LIBPATH="$( cd "$( dirname "$0" )" && pwd )"

PROJECT=""
META=".$LIBNAMEProject"

TEMPLATE_URL="https://github.com/fed135/Arstider_template/archive/master.zip"
TEMPLATE_FOLDER="Arstider_template-master"

DEPENDENCIES=('http://requirejs.org/docs/release/2.1.14/minified/require.js' 'https://raw.githubusercontent.com/goldfire/howler.js/master/howler.min.js')
LIBRARIES=('require.js' 'howler.min.js')

ALL_ARGUMENTS=( $@ )
MAIN_COMMAND=""
MAIN_ARGUMENTS=()

###-------------------------------------// Colors

BLUE_COLOR="\033[0;34m"
GREEN_COLOR="\033[0;32m"
YELLOW_COLOR="\033[0;33m"
RED_COLOR="\033[0;31m"
PURPLE_COLOR="\033[0;35m"
RESET="\e[0m"

###-------------------------------------// Functions

check_if_in_project () {
  if [ -f $META ] ; then
    mapfile < $META
    raw="${MAPFILE[@]}"
    PROJECT=${raw:5}
  fi
}

change_directory () {
  cd $1
}

#Change build path
change_dest () {
  if [ $# -eq 1 ] ; then
    mkdir -p $1
    export BUILD_DEST=$1
  fi
  echo "Destination: $BUILD_DEST"
}

 

welcome () {
  check_if_in_project

  change_directory $LIBPATH

  if [ -z "$BUILD_DEST" ] ; then
    DESTINATION="$PWD/dist"
    change_dest $DESTINATION
  else
    DESTINATION="$BUILD_DEST"
  fi
}

check_if_override () {
  echo "does a file/folder already have their name on it ?"
}

#Compile function
compile () {
  if [ $# -eq 2 ] ; then
    change_dest $2
  fi
  ant $1
}



#Create a new project
create_project () {
  #resolve project directory path
  project_dir="$CURRENT_DIR/$1"
  if [ "$2" != "" ] ; then 
    project_dir="$2/$1"
  fi

  #create folder
  if [ -d "$project_dir" ] ; then
    show_confirm "Folder already exists, delete the folder? (Y/n)"
    echo $BR
    if [ $result -eq 1 ] ; then
      rm -rf "$project_dir"
      if [ -d "$project_dir" ] ; then
        #Cancelled deletion, exit
        exit 0
      fi
    else
      exit 0
    fi
  else
    mkdir -p "$project_dir"
  fi

  #get template zip
  echo -e $GREEN_COLOR"Getting lastest project template..."$RESET
  wget $TEMPLATE_URL
  echo -e $GREEN_COLOR"Unzipping..."$RESET
  unzip master.zip
  echo -e $GREEN_COLOR"Copying files..."$RESET
  cp -R "$PWD/$TEMPLATE_FOLDER/" "$project_dir"

  #cleanup
  echo -e $GREEN_COLOR"Cleaning up..."$RESET
  rm master.zip
  rm -rf $TEMPLATE_FOLDER

  #get libraries
  mkdir "$project_dir/src/js/libs"
  for (( i=0 ; i < ${#DEPENDENCIES[@]} ; i++ )) do
    echo -e $GREEN_COLOR"Getting library "${LIBRARIES[$i]}"..."$RESET
    wget "${DEPENDENCIES[$i]}"
    cp "${LIBRARIES[$i]}" "$project_dir/src/js/libs/${LIBRARIES[$i]}"
    rm "${LIBRARIES[$i]}"
  done

  #Done
  echo -e $GREEN_COLOR"Finished!"$RESET
}

create_screen () {
  if [ PROJECT != ""] ; then
    echo "Creating screen inside project $PROJECT"
  else
    err_msg "Not currently in a project!"
  fi
}

#Show version number function
version () {
  mapfile < version.properties
  echo -e "$BLUE_COLOR$LIBNAME ${MAPFILE[@]}$RESET"
}

#Show manual function
manual () {
  local tab="\t"
  local ret=" "

  for i in "${!commands[@]}" do
    #Separator
    echo $ret

    #Title
    echo -e $tab$BLUE_COLOR$i$RESET
    echo $ret

    #Keys
    for (( u=0 ; u < ${#commands[$i][key][@]} ; u++ )) do
      echo -e $tab$tab"${commands[$i][key][$u]}"
    done
    echo $ret

    #Arguments
    for (( u=0 ; u < ${#commands[$i][arguments][@]} ; u++ )) do
      echo -e $tab$tab"${commands[$i][arguments][$u]}"
    done
    echo $ret

    #description
    echo ${commands[$i][description]}

    #target
    echo ${commands[$i][target]}

    #output
    echo ${commands[$i][output]}
}

#Error message
err_msg () {
  PRE="Error:"

  if [ $# -eq 0 ] ; then
    echo -e $RED_COLOR$PRE$RESET
  elif [ $# -eq 1 ] ; then
    echo -e $RED_COLOR$PRE$1$RESET
  elif [ $# -eq 2 ] ; then
    echo -e $RED_COLOR$PRE$1$RESET$2
  fi

  #show manual
  manual
}

#Confirmation message
show_confirm () {
  read -p "$1 " -n 1 -r
  echo $BR  # (optional) move to a new line
  if [[ $REPLY =~ ^[Yy]$ ]] ; then
    # do dangerous stuff
    result=1
  else
    result=0
  fi
}

#Warning message
warn_msg () {
  PRE="Warning:"

  if [ $# -eq 0 ] ; then
    echo -e $PURPLE_COLOR$PRE$RESET
  elif [ $# -eq 1 ] ; then
    echo -e $PURPLE_COLOR$PRE$1$RESET
  fi
}

#Goodbye message
goodbye () {
  echo -e $RESET
  cd $CURRENT_DIR
}

#Run command
run_command () {
  local command_found=0

  for (( i=0 ; i < ${#commands[@]} ; i++ )) do
    for (( u=0 ; u < ${#commands[$i][key][@]} ; u++ )) do
      if [ $MAIN_COMMAND == commands[$i][key][$u] ] ; then
        command_found=1
        filters[commands[$i][target]]
        commands[$i][method]
      fi
    done
  done

  if [ $command_found == 0 ] ; then
    #No command
    err_msg "Command not found!"
    exit 0
  fi
}

###-------------------------------------// Commands

init_commands () {
  declare -a commands

  #Compile command
  declare -a commands["compile"]
  local ref=commands["compile"]
  ref[key]=("-c"  "--compile")
  ref[target]=$LIBNAME
  ref[method]=compile
  ref[arguments]=("?Destination")
  ref[output]="program"
  ref[description]="Compiles the $LIBNAME classes into $LIBNAME.js (unminified) and $LIBNAME.min.js (Google Closure turbo compression) at location: $DESTINATION"

  #Change destination command
  declare -a commands["change destination"]
  local ref=commands["change destination"]
  ref[key]=("-d"  "--destination")
  ref[target]="varies"
  ref[method]=change_dest
  ref[arguments]=("Destination")
  ref[output]="Current build path"
  ref[description]="Compiles the $LIBNAME classes into $LIBNAME.js (unminified) and $LIBNAME.min.js (Google Closure turbo compression) at location: $DESTINATION"

  #Build documentation command
  declare -a commands["documentation"]
  local ref=commands["documentation"]
  ref[key]=("--documentation")
  ref[target]=$LIBNAME
  ref[method]=documentation
  ref[arguments]=("?Destination")
  ref[output]="program"
  ref[description]="Compiles the project's technical documentation (JSDoc) at the specified location: $DESTINATION"

  #Show manual command
  declare -a commands["manual"]
  local ref=commands["manual"]
  ref[key]=("-m" "--manual")
  ref[target]="varies"
  ref[method]=manual
  ref[arguments]=()
  ref[output]="$LIBNAME user manual"
  ref[description]="Shows the available commands for this program"

  #New project
  declare -a commands["new project"]
  local ref=commands["new project"]
  ref[key]=("-p" "--newproject")
  ref[target]="varies"
  ref[method]=create_project
  ref[arguments]=("Project name" "?Destination")
  ref[output]="program"
  ref[description]="Fetches the latest template project from internet and creates a new project at the specified location: $DESTINATION"

  #New screen
  declare -a commands["new screen"]
  local ref=commands["new screen"]
  ref[key]=("-s" "--newscreen")
  ref[target]="project"
  ref[method]=create_screen
  ref[arguments]=("Screen name" "?Destination")
  ref[output]="program"
  ref[description]="Fetches the latest screen template (recommended syntax) from internet and creates a new screen at the specified location: $DESTINATION"

  #Version
  declare -a commands["version"]
  local ref=commands["version"]
  ref[key]=("-v" "--version")
  ref[target]="varies"
  ref[method]=version
  ref[arguments]=()
  ref[output]="$LIBNAME version number"
  ref[description]="Displays the currently installed $LIBNAME version"
}

###-------------------------------------// Filters

#Temp
base_filter () {
  return 1
}

#Temp
varies_filter () {
  base_filter
  return 1
}

project_filter () {
  base_filter
  if [ $PROJECT == ""] ; then
    err_msg "Not currently in a project!"
    exit 0
  fi
}

declare -a filters
filters[$LIBNAME]=base_filter
filters["varies"]=varies_filter
filters["project"]=project_filter

###-------------------------------------// Program

main () {
  welcome
  init_commands
  run_command
  goodbye
}

#Entry point
if [ $# -eq 0 ] ; then
  #No command
  err_msg "No command specified"
else
  MAIN_COMMAND=$1
  MAIN_ARGUMENTS==("${ALL_ARGUMENTS[@]:1}")
fi

main