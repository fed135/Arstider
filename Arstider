#!/bin/bash

###-------------------------------------// Variables

DESTINATION=""

CURRENT_DIR="$PWD"

LIBNAME="Arstider"

PROJECT=""
META=".$LIBNAMEProject"

TEMPLATE_URL="https://github.com/fed135/Arstider_template/archive/master.zip"
TEMPLATE_FOLDER="Arstider_template-master"

DEPENDENCIES=('http://requirejs.org/docs/release/2.1.14/minified/require.js' 'https://raw.githubusercontent.com/goldfire/howler.js/master/howler.min.js')
LIBRARIES=('require.js' 'howler.min.js')

###-------------------------------------// Colors

BLUE_COLOR="\033[0;34m"
GREEN_COLOR="\033[0;32m"
YELLOW_COLOR="\033[0;33m"
RED_COLOR="\033[0;31m"
PURPLE_COLOR="\033[0;35m"
RESET="\e[0m"

###-------------------------------------// Functions

check_if_in_project () {
  if [ -f $META ] ; then
    mapfile < $META
    raw="${MAPFILE[@]}"
    PROJECT=${raw:5}
  fi
}

welcome () {
  check_if_in_project

  DIR="$( cd "$( dirname "$0" )" && pwd )"
  cd $DIR

  if [ -z "$BUILD_DEST" ] ; then
    echo " initializing default build path:" $GREEN_COLOR"$PWD/dist"$RESET
    DESTINATION="$PWD/dist"
    change_dest $DESTINATION
  else
    DESTINATION="$BUILD_DEST"
  fi
}

check_if_override () {
  echo "does a file/folder already have their name on it ?"
}

#Compile function
compile () {
  if [ $# -eq 2 ] ; then
    change_dest $2
  fi
  ant $1
}

#Change build path
change_dest () {
  if [ $# -eq 1 ] ; then
    mkdir -p $1
    export BUILD_DEST=$1
  fi
  echo "$BUILD_DEST"
}

#Create a new project
create_project () {
  #resolve project directory path
  project_dir="$CURRENT_DIR/$1"
  if [ "$2" != "" ] ; then 
    project_dir="$2/$1"
  fi

  #create folder
  if [ -d "$project_dir" ] ; then
    show_confirm "Folder already exists, delete the folder? (Y/n)"
    echo $BR
    if [ $result -eq 1 ] ; then
      rm -rf "$project_dir"
      if [ -d "$project_dir" ] ; then
        #Cancelled deletion, exit
        exit 0
      fi
    else
      exit 0
    fi
  else
    mkdir -p "$project_dir"
  fi

  #get template zip
  echo -e $GREEN_COLOR"Getting lastest project template..."$RESET
  wget $TEMPLATE_URL
  echo -e $GREEN_COLOR"Unzipping..."$RESET
  unzip master.zip
  echo -e $GREEN_COLOR"Copying files..."$RESET
  cp -R "$PWD/$TEMPLATE_FOLDER/" "$project_dir"

  #cleanup
  echo -e $GREEN_COLOR"Cleaning up..."$RESET
  rm master.zip
  rm -rf $TEMPLATE_FOLDER

  #get libraries
  mkdir "$project_dir/src/js/libs"
  for (( i=0 ; i < ${#DEPENDENCIES[@]} ; i++ )) do
  echo -e $GREEN_COLOR"Getting library "${LIBRARIES[$i]}"..."$RESET
  wget "${DEPENDENCIES[$i]}"
  cp "${LIBRARIES[$i]}" "$project_dir/src/js/libs/${LIBRARIES[$i]}"
  rm "${LIBRARIES[$i]}"
  done

  #Done
  echo -e $GREEN_COLOR"Finished!"$RESET
}

create_screen () {
  if [ PROJECT != ""] ; then
    echo "Creating screen inside project $PROJECT"
  else
    err_msg "Not currently in a project!"
  fi
}

#Show version number function
version () {
  mapfile < version.properties
  echo -e "$BLUE_COLOR$LIBNAME ${MAPFILE[@]}$RESET"
}

#Show manual function
manual () {
  TAB="\t"
  PARTAB=$TAB$TAB$TAB$TAB
  BR=" "

  #Usage
  #...

  #Compile
  echo -e " -c|--compile     $YELLOW_COLOR[opt]$RESET dest"
  echo -e $PARTAB"compiles the classes into the $LIBNAME.js and $LIBNAME.min.js"
  echo -e $PARTAB"at the specified location, or at the default loaction: "
  echo -e $PARTAB$DESTINATION
  echo $BR

  #Print/set destination path
  echo -e " -d|--dest        $YELLOW_COLOR[opt]$RESET dest"
  echo -e $PARTAB"defines the path, if specified, prints the current one otherwise"
  echo $BR

  #Generate Documentation
  echo -e " -doc             $YELLOW_COLOR[opt]$RESET dest"
  echo -e $PARTAB"compiles the project documentation (JSDoc) at the specified"
  echo -e $PARTAB"location or at the default location : "
  echo -e $PARTAB$DESTINATION
  echo $BR

  #Manual
  echo -e " -h|--help"
  echo -e $PARTAB"shows the available commands for this program"
  echo $BR

  #New project
  echo -e " -n|--new-project name $YELLOW_COLOR[opt]$RESET dest"
  echo -e $PARTAB"fetches the arstider template project from github and initializes"
  echo -e $PARTAB"it at the specified location or at the default location :"  
  echo -e $PARTAB$DESTINATION
  echo $BR

  #New screen
  echo -e " -s|--new-screen name"
  echo -e $PARTAB"creates a new screen inside the current project"
  echo $BR

  #Print Version
  echo -e " -v|--version"
  echo -e $PARTAB"displays the current engine version"
  echo $BR
}

#Error message
err_msg () {
  PRE="Error:"

  if [ $# -eq 0 ] ; then
    echo -e $RED_COLOR$PRE$RESET
  elif [ $# -eq 1 ] ; then
    echo -e $RED_COLOR$PRE$1$RESET
  elif [ $# -eq 2 ] ; then
    echo -e $RED_COLOR$PRE$1$RESET$2
  fi

  #show manual
  manual
}

#Confirmation message
show_confirm () {
  read -p "$1 " -n 1 -r
  echo $BR  # (optional) move to a new line
  if [[ $REPLY =~ ^[Yy]$ ]] ; then
    # do dangerous stuff
    result=1
  else
    result=0
  fi
}

#Warning message
warn_msg () {
  PRE="Warning:"

  if [ $# -eq 0 ] ; then
    echo -e $PURPLE_COLOR$PRE$RESET
  elif [ $# -eq 1 ] ; then
    echo -e $PURPLE_COLOR$PRE$1$RESET
  fi
}

#Goodbye message
goodbye () {
  echo -e $RESET
  cd $CURRENT_DIR
}

###-------------------------------------// Program

welcome

#Entry point
if [ $# -eq 0 ] ; then
  #No command
  err_msg "No command specified"
else
  #Detect command
  case "$1" in
  "-c" | "--compile")
    compile build.all "$2"
    ;;
  "-d" | "--dest")
    change_dest "$2"
    ;;
  "--doc")
    compile build.documentation "$2"
    ;;
  "-m" | "--man")
    manual
    ;;
  "-n" | "--new-project")
    create_project "$2" "$3"
    ;;
  "-s" | "--new-screen")
    create_screen "$2"
    ;;
  "-v" | "--version")
    version
    ;;
  *)
    err_msg "Command not found " $1
  esac
fi

goodbye