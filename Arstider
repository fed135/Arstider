#!/bin/bash

###-------------------------------------// Variables

DESTINATION=""

CURRENT_DIR="$PWD"

LIBNAME="Arstider"
LIBPATH="$( cd "$( dirname "$0" )" && pwd )"

PROJECT=""
META=".$LIBNAMEProject"

TEMPLATE_URL="https://github.com/fed135/Arstider_template/archive/master.zip"
TEMPLATE_FOLDER="Arstider_template-master"

DEPENDENCIES=('http://requirejs.org/docs/release/2.1.14/minified/require.js' 'https://raw.githubusercontent.com/goldfire/howler.js/master/howler.min.js')
LIBRARIES=('require.js' 'howler.min.js')

ALL_ARGUMENTS=( $@ )
MAIN_COMMAND=""
MAIN_ARGUMENTS=()

declare -A commands
declare -A filters

###-------------------------------------// Colors

BLUE_COLOR="\033[0;34m"     #Reserved names/methods
GREEN_COLOR="\033[0;32m"    #Key words/variables
YELLOW_COLOR="\033[0;33m"   #Paths
RED_COLOR="\033[0;31m"      #Errors
PURPLE_COLOR="\033[0;35m"   #Warnings
CYAN_COLOR="\033[0;36m"     #External Program output
GRAY_COLOR="\033[0;37m"     #Comments/Labels
RESET="\e[0m"

###-------------------------------------// Functions

check_if_in_project () {
  if [ -f $META ] ; then
    mapfile < $META
    raw="${MAPFILE[@]}"
    PROJECT=${raw:5}
  fi
}

change_directory () {
  cd $1
}

#Change build path
change_dest () {
  if [ $# -eq 1 ] ; then
    mkdir -p $1
    export BUILD_DEST=$1
  fi
  echo -e $GRAY_COLOR"Destination: $YELLOW_COLOR$BUILD_DEST$RESET"
}

 

welcome () {
  check_if_in_project

  change_directory $LIBPATH

  if [ -z "$BUILD_DEST" ] ; then
    DESTINATION="$PWD/dist"
    change_dest $DESTINATION
  else
    DESTINATION="$BUILD_DEST"
  fi
}

#Compile function
compile () {
  if [ ${#MAIN_ARGUMENTS[@]} -eq 2 ] ; then
    change_dest ${MAIN_ARGUMENTS[$2]}
  fi
  echo -e $CYAN_COLOR
  ant ${MAIN_ARGUMENTS[$1]}
  echo -e $RESET
}



#Create a new project
create_project () {
  #resolve project directory path
  project_dir="$CURRENT_DIR/$1"
  if [ "$2" != "" ] ; then 
    project_dir="$2/$1"
  fi

  #create folder
  if [ -d "$project_dir" ] ; then
    show_confirm "Folder already exists, delete the folder? (Y/n)"
    echo $BR
    if [ $result -eq 1 ] ; then
      rm -rf "$project_dir"
      if [ -d "$project_dir" ] ; then
        #Cancelled deletion, exit
        exit 0
      fi
    else
      exit 0
    fi
  else
    mkdir -p "$project_dir"
  fi

  #get template zip
  echo -e $GREEN_COLOR"Getting lastest project template..."$RESET
  wget $TEMPLATE_URL
  echo -e $GREEN_COLOR"Unzipping..."$RESET
  unzip master.zip
  echo -e $GREEN_COLOR"Copying files..."$RESET
  cp -R "$PWD/$TEMPLATE_FOLDER/" "$project_dir"

  #cleanup
  echo -e $GREEN_COLOR"Cleaning up..."$RESET
  rm master.zip
  rm -rf $TEMPLATE_FOLDER

  #get libraries
  mkdir "$project_dir/src/js/libs"
  for (( i=0 ; i < ${#DEPENDENCIES[@]} ; i++ )) do
    echo -e $GREEN_COLOR"Getting library "${LIBRARIES[$i]}"..."$RESET
    wget "${DEPENDENCIES[$i]}"
    cp "${LIBRARIES[$i]}" "$project_dir/src/js/libs/${LIBRARIES[$i]}"
    rm "${LIBRARIES[$i]}"
  done

  #Done
  echo -e $GREEN_COLOR"Finished!"$RESET
}

create_screen () {
  if [ PROJECT != ""] ; then
    echo "Creating screen inside project $PROJECT"
  else
    err_msg "Not currently in a project!"
  fi
}

#Show version number function
version () {
  mapfile < version.properties
  echo -e "$BLUE_COLOR$LIBNAME ${MAPFILE[@]}$RESET"
}

#Show manual function
manual () {
  local tab="\t"
  local ret="|*"
  local IFS=','
  local keys
  local arguments
  local cm
  local isopt
  local words
  local line
  local maxlinesize=60

  for (( i=0 ; i < ${#command_list[@]} ; i++ )) do
    cm=${command_list[$i]}
    #Separator
    echo "|********************************************"

    #Title
    echo -e "$ret $BLUE_COLOR$cm$RESET"

    echo "$ret - - - - - - - - - - - - - - - - - - - - -"

    #Keys
    echo -e "$ret "$GRAY_COLOR"Keyword(s):"$RESET
    IFS=',' read -a keys <<< "${commands[$cm,key]}"
    for (( u=0 ; u < ${#keys[@]} ; u++ )) do
      echo -e $ret$tab$tab"${keys[$u]}"
    done
    echo $ret

    #Arguments
    echo -e "$ret "$GRAY_COLOR"Argument(s):"$RESET
    IFS=',' read -a arguments <<< "${commands[$cm,arguments]}"
    for (( u=0 ; u < ${#arguments[@]} ; u++ )) do
      isopt="${arguments[$u]:0:1}"
      if [ $isopt == "?" ] ; then
        echo -e $ret$tab$tab"${arguments[$u]:1} "$GREEN_COLOR"[optional]"$RESET
      else
        echo -e $ret$tab$tab"${arguments[$u]}"
      fi
    done
    echo $ret

    #description
    echo -e "$ret "$GRAY_COLOR"Description:"$RESET
    IFS=' ' read -a words <<< "${commands[$cm,description]}"
    while [[ ${#words[@]} -gt 0 ]] ; do
      line=""
      while [[ $((${#line}+${#words[0]})) -lt $maxlinesize ]]; do
        line+="${words[0]} "
        words=("${words[@]:1}")
      done
      echo -e "$ret "$tab$line
    done
    echo $ret

    #target
    echo -e "$ret "$GRAY_COLOR"Target (global/varies/project):"$RESET
    echo -e "$ret "$tab${commands[$cm,target]}
    echo $ret

    #output
    echo -e "$ret "$GRAY_COLOR"Output:"$RESET
    echo -e "$ret "$tab${commands[$cm,output]}
    echo $ret
  done
  echo "|********************************************"
}

#Error message
err_msg () {
  PRE="Error:"

  if [ $# -eq 0 ] ; then
    echo -e $RED_COLOR$PRE$RESET
  elif [ $# -eq 1 ] ; then
    echo -e $RED_COLOR$PRE$1$RESET
  elif [ $# -eq 2 ] ; then
    echo -e $RED_COLOR$PRE$1$RESET$2
  fi

  #show manual
  manual
}

#Confirmation message
show_confirm () {
  read -p "$1 " -n 1 -r
  echo $BR  # (optional) move to a new line
  if [[ $REPLY =~ ^[Yy]$ ]] ; then
    # do dangerous stuff
    result=1
  else
    result=0
  fi
}

#Warning message
warn_msg () {
  PRE="Warning:"

  if [ $# -eq 0 ] ; then
    echo -e $PURPLE_COLOR$PRE$RESET
  elif [ $# -eq 1 ] ; then
    echo -e $PURPLE_COLOR$PRE$1$RESET
  fi
}

#Goodbye message
goodbye () {
  echo -e $RESET
  cd $CURRENT_DIR
}

#Run command
run_command () {
  local command_found=0
  local IFS
  local keys
  local cm
  local filter

  for (( i=0 ; i < ${#command_list[@]} ; i++ )) do
    cm=${command_list[$i]}
    IFS="," read -ra keys <<< "${commands[$cm,key]}"
    for u in "${keys[@]}" ; do
      if [ $MAIN_COMMAND == $u ] ; then
        command_found=1
        filter="${commands[$cm,target]}"
        ${filters[$filter]}
        ${commands[$cm,method]}
      fi
    done
  done

  if [ $command_found == 0 ] ; then
    #No command
    err_msg "Command not found!"
    exit 0
  fi
}

###-------------------------------------// Commands

init_commands () {
  command_list=()

  local ref=""

  local key="key"
  local target="target"
  local method="method"
  local arguments="arguments"
  local output="output"
  local description="description"

  #Compile command
  ref="compile"
  command_list+=("$ref")
  commands[$ref,$key]="-c,--compile"
  commands[$ref,$target]="global"
  commands[$ref,$method]=compile
  commands[$ref,$arguments]="?Destination"
  commands[$ref,$output]="program"
  commands[$ref,$description]="Compiles the $LIBNAME classes into $LIBNAME.js (unminified) and $LIBNAME.min.js (Google Closure turbo compression) at location"

  #Change destination command
  ref="change destination"
  command_list+=("$ref")
  commands[$ref,$key]="-d,--destination"
  commands[$ref,$target]="varies"
  commands[$ref,$method]=change_dest
  commands[$ref,$arguments]="Destination"
  commands[$ref,$output]="Current build path"
  commands[$ref,$description]="Changes the current output folder"

  #Build documentation command
  ref="documentation"
  command_list+=("$ref")
  commands[$ref,$key]="--documentation"
  commands[$ref,$target]="global"
  commands[$ref,$method]=documentation
  commands[$ref,$arguments]="?Destination"
  commands[$ref,$output]="program"
  commands[$ref,$description]="Compiles the project's technical documentation (JSDoc) at the specified location"

  #Show manual command
  ref="manual"
  command_list+=("$ref")
  commands[$ref,$key]="-m,--manual"
  commands[$ref,$target]="varies"
  commands[$ref,$method]=manual
  commands[$ref,$arguments]=""
  commands[$ref,$output]="$LIBNAME user manual"
  commands[$ref,$description]="Shows the available commands for this program"

  #New project
  ref="new project"
  command_list+=("$ref")
  commands[$ref,$key]="-p,--newproject"
  commands[$ref,$target]="varies"
  commands[$ref,$method]=create_project
  commands[$ref,$arguments]="Project name,?Destination"
  commands[$ref,$output]="program"
  commands[$ref,$description]="Fetches the latest template project from internet and creates a new project at the specified location"

  #New screen
  ref="new screen"
  command_list+=("$ref")
  commands[$ref,$key]="-s,--newscreen"
  commands[$ref,$target]="project"
  commands[$ref,$method]=create_screen
  commands[$ref,$arguments]="Screen name,?Destination"
  commands[$ref,$output]="program"
  commands[$ref,$description]="Fetches the latest screen template (recommended syntax) from internet and creates a new screen at the specified location"

  #Version
  ref="version"
  command_list+=("$ref")
  commands[$ref,$key]="-v,--version"
  commands[$ref,$target]="varies"
  commands[$ref,$method]=version
  commands[$ref,$arguments]=""
  commands[$ref,$output]="$LIBNAME version number"
  commands[$ref,$description]="Displays the currently installed $LIBNAME version"
}

###-------------------------------------// Filters

init_filters () {
  #Temp
  base_filter () {
    #echo "base filter"
    return 1
  }

  #Temp
  varies_filter () {
    base_filter
    #echo "varies filter"
    return 1
  }

  project_filter () {
    base_filter
    #echo "project filter"
    if [ $PROJECT == ""] ; then
      err_msg "Not currently in a project!"
      exit 0
    fi
  }

  filters["global"]=base_filter
  filters["varies"]=varies_filter
  filters["project"]=project_filter
}

###-------------------------------------// Program

main () {
  welcome
  init_commands
  init_filters
  run_command
  goodbye
}

#Entry point
if [ $# -eq 0 ] ; then
  #No command
  err_msg "No command specified"
  exit 0
else
  MAIN_COMMAND=$1
  MAIN_ARGUMENTS=("${ALL_ARGUMENTS[@]:1}")
fi

main